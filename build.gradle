plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id 'com.gradleup.shadow' version '8.3.5'
}

group = 'pl.fortx'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        url "https://central.sonatype.com/repository/maven-snapshots/"
        name "sonatype-snapshots"
        mavenContent {
            snapshotsOnly()
        }
    }
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.8-R0.1-SNAPSHOT")


    // Cloud for command handling
    implementation 'org.incendo:cloud-annotations:2.0.0'
    implementation 'org.incendo:cloud-minecraft-extras:2.0.0-beta.10'
    implementation 'org.incendo:cloud-paper:2.0.0-beta.10'
    implementation 'org.incendo:cloud-core:2.0.0'


    // Boosted YAML for config management
    implementation('dev.dejvokep:boosted-yaml:1.3.6')
    implementation 'dev.dejvokep:boosted-yaml-spigot:1.5'


    // Redis for multi-server communication
    implementation 'redis.clients:jedis:6.0.0'

    // Reflections for annotations (not used xD)
    implementation 'org.reflections:reflections:0.10.2'


    // Discord for bot integration (S00N)
    implementation 'net.dv8tion:JDA:5.0.0-beta.20'

    // Adventure API for Components
    implementation "net.kyori:adventure-api:4.24.0"

    // Lombok for getters, setters and more shii
    compileOnly("org.projectlombok:lombok:1.18.38")
    annotationProcessor("org.projectlombok:lombok:1.18.38")

    testCompileOnly("org.projectlombok:lombok:1.18.38")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.38")
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('paper-plugin.yml') {
        expand props
    }
}

shadowJar {
    relocate 'org.incendo.cloud', 'pl.fortx.report.libs.cloud'
    relocate 'dev.dejvokep.boostedyaml', 'pl.fortx.report.libs.boostedyaml'
    relocate 'redis.clients', 'pl.fortx.report.libs.redis'
    relocate 'net.dv8tion', 'pl.fortx.report.libs.discord'
    relocate 'net.kyori.adventure', 'pl.fortx.report.libs.adventure'
    relocate 'org.reflections', 'pl.fortx.report.libs.reflections'
    relocate 'org.projectlombok', 'pl.fortx.report.libs.lombok'
    relocate 'io.papermc.paper', 'pl.fortx.report.libs.paper'
    relocate 'dev.dejvokep.boostedyaml', 'pl.fortx.report.libs'
}
